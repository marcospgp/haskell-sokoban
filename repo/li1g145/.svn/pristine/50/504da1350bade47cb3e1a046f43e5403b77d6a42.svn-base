module Sokoban where

import Data.Char
import Data.List

type Coord = (Int,Int)

-- | Validates sokoban input including map and coordinates. Returns OK or the number of the line where an error was found.
validate :: String -- ^ The path to the file containing the data to be parsed
         -> IO ()
validate path = do
    content <- readFile path -- Read the input file
    let fileLines = lines content
    let result = parseLines fileLines 0
    if result == -1 then
        putStrLn "OK"
    else
        putStrLn (show result)

-- | Parses the file lines one by one recursively
parseLines :: [String] -- ^ The array of lines to be parsed
           -> Int      -- ^ The number of lines already parsed (to log the line number on error)
           -> Int      -- ^ Returns -1 on success or a line number on error
parseLines lines index
    | length lines <= index = -1
    | (head line == '#') =
        if (validateMapLine lines index (length line)) then
            parseLines lines (index + 1)
        else
            index
    | (isDigit (head line)) =
        if (True{-validateCoordinates lines index-}) then
            parseLines lines (index + 1)
        else
            index
    | otherwise = index
    where
        line = lines !! index


validateMapLine :: [String] -- ^ The array of lines being parsed
                -> Int      -- ^ The number of lines already parsed
                -> Int      -- ^ The expected length of a map line
                -> Bool     -- ^ True on success, False on error
validateMapLine lines index expectedLength
    | (length line /= expectedLength) = False
    | (head line /= '#' || last line /= '#') = False
    | not (listHasOnly line ['#', ' ', '.']) = False
    | otherwise = True
    where
        line = lines !! index

{-
-- | Validates a set of coordinates
validateCoordinateLine :: [String] -- ^ The array of lines being parsed
                       -> Int      -- ^ The number of lines already parsed
                       -> Bool     -- ^ True on success, False on error
validateCoordinateLine lines index
-}

-- Auxiliary functions

-- | Checks if a list has only a certain set of items
listHasOnly :: (Eq a)
            => [a] -- ^ List to evaluate
            -> [a] -- ^ List of items the list can contain
            -> Bool
listHasOnly list items = not (elem False (map aux list))
    where
        aux x = aux2 x items
        aux2 x [] = False
        aux2 x (y : ys)
            | (x == y) = True
            | (x /= y && null ys) = False
            | otherwise = aux2 x ys

