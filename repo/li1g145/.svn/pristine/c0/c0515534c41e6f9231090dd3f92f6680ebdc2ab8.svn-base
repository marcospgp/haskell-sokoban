module Main where

import Data.Char
import Data.List

type Coord = (Int,Int)

-- Start of copied code from Mooshak

inStr :: String -> [String]
inStr [] = []
inStr ['\n'] = [[],[]]
inStr (x:xs) = case x of
    '\n' -> []:inStr xs
    otherwise -> case inStr xs of
        y:ys -> (x:y):ys
        [] -> [[x]]

outStr :: [String] -> String
outStr [] = "\n"
outStr t = unlines t

-- dev main
main = do inp <- getLine
          -- putStr (outStr (tarefa1 (inStr inp)))
          content <- readFile inp -- Read the input file
          let fileLines = lines content
          putStrLn (head (tarefa1 fileLines))
-- /dev main

{-
-- dist main
main = do inp <- getContents
          putStr (outStr (tarefa1 (inStr inp)))

-- /dist main
-}

-- End of copied code from Mooshak

-- | Validates sokoban input including map and coordinates. Returns OK or the number of the line where an error was found.
tarefa1 :: [String] -- ^ The list of lines to be parsed
        -> [String] -- ^ Returns ["OK"] on success or a line number on error (ex: ["2"])
tarefa1 lines =
    if mapLinesResult /= -1 then
        [show mapLinesResult]
    else if coordinateLinesResult /= -1 then
        [show (length mapLines + coordinateLinesResult)]
    else
        ["OK"]
    where
        index = listHeadNot lines '#' -- Split the list of lines where the first character of a line isn't '#'
        (mapLines, coordinateLines) = splitAt index lines
        mapLinesResult = validateMapLines mapLines 0 (length (head mapLines))
        coordinateLinesResult = validateCoordinateLines coordinateLines 0

-- | Validates map lines recursively
validateMapLines :: [String] -- ^ The list of lines being parsed
                 -> Int      -- ^ The number of lines already parsed
                 -> Int      -- ^ The expected length of a map line
                 -> Int      -- ^ -1 on success, line index on error
validateMapLines lines index expectedLength
    | (index >= length lines) = if index >= 3 then -1 else index -- Finished iterating over the lines
    | (length line /= expectedLength) = index                    -- Check the line length
    | (head line /= '#' || last line /= '#') = index             -- Check if the first and last chars on the line are '#'
    | not (listHasOnly line ['#', ' ', '.']) = index             -- Check that the line only has the characters ['#', ' ', '.']
    | otherwise = validateMapLines lines (index + 1) expectedLength
    where
        line = lines !! index

-- | Validates coordinate lines recursively
-- |
-- | Note:
-- |  The coordinate lines validation function can return a line number relative to the lines it was given
-- |  because we calculate the correct line number on the parent function (coordinateLinesResult + length mapLines)
-- |
validateCoordinateLines :: [String] -- ^ The array of lines being parsed
                        -> Int       -- ^ The number of lines already parsed
                        -> Int       -- ^ -1 on success, line index on error
validateCoordinateLines lines index = -1

-- Auxiliary functions

-- | Checks if a list has only a certain set of items
listHasOnly :: (Eq a)
            => [a] -- ^ List to evaluate
            -> [a] -- ^ List of items the list can contain
            -> Bool
listHasOnly list items = not (elem False (map aux list))
    where
        aux x = aux2 x items
        aux2 x [] = False
        aux2 x (y : ys)
            | (x == y) = True
            | (x /= y && null ys) = False
            | otherwise = aux2 x ys

-- | Returns the index at which a list of strings stops having a certain head character
listHeadNot :: [String] -> Char -> Int
listHeadNot [] _ = 0
listHeadNot x char = aux x char 0
    where
        aux [] _ currentIndex = currentIndex
        aux (x : xs) char currentIndex
            | (head x /= char) = currentIndex
            | otherwise = aux xs char (currentIndex + 1)
