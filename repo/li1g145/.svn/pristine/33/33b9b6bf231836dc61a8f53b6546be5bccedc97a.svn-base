<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Main</title><link href="ocean.css" rel="stylesheet" type="text/css" title="Ocean" /><script src="haddock-util.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[
window.onload = function () {pageLoad();setSynopsis("mini_Main.html");};
//]]>
</script></head><body><div id="package-header"><ul class="links" id="page-menu"><li><a href="index.html">Contents</a></li><li><a href="doc-index.html">Index</a></li></ul><p class="caption empty">&nbsp;</p></div><div id="content"><div id="module-header"><table class="info"><tr><th>License</th><td>Unlicensed</td></tr><tr><th>Safe Haskell</th><td>Safe</td></tr></table><p class="caption">Main</p></div><div id="description"><p class="caption">Description</p><div class="doc empty">&nbsp;</div></div><div id="synopsis"><p id="control.syn" class="caption expander" onclick="toggleSection('syn')">Synopsis</p><ul id="section.syn" class="hide" onclick="toggleSection('syn')"><li class="src short"><a href="#v:inStr">inStr</a> :: String -&gt; [String]</li><li class="src short"><a href="#v:outStr">outStr</a> :: [String] -&gt; String</li><li class="src short"><a href="#v:main">main</a> :: IO ()</li><li class="src short"><a href="#v:tarefa1">tarefa1</a> :: [String] -&gt; [String]</li><li class="src short"><a href="#v:validateMapLines">validateMapLines</a> :: [String] -&gt; Int -&gt; Int</li><li class="src short"><a href="#v:validatePlayerCoordinates">validatePlayerCoordinates</a> :: [String] -&gt; String -&gt; Bool</li><li class="src short"><a href="#v:validateCoordinateLines">validateCoordinateLines</a> :: [String] -&gt; [String] -&gt; Int -&gt; [String] -&gt; Int</li><li class="src short"><a href="#v:validateEmptyLines">validateEmptyLines</a> :: [String] -&gt; Int -&gt; Int</li><li class="src short"><a href="#v:listHasOnly">listHasOnly</a> :: Eq a =&gt; [a] -&gt; [a] -&gt; Bool</li><li class="src short"><a href="#v:listHeadNot">listHeadNot</a> :: [String] -&gt; Char -&gt; Int</li><li class="src short"><a href="#v:listHeadIs">listHeadIs</a> :: [String] -&gt; Char -&gt; Int</li><li class="src short"><a href="#v:myElemIndex">myElemIndex</a> :: Eq a =&gt; a -&gt; [a] -&gt; Int</li><li class="src short"><a href="#v:validateCoordinateFormat">validateCoordinateFormat</a> :: String -&gt; Bool</li><li class="src short"><a href="#v:howManyTimes">howManyTimes</a> :: Eq a =&gt; a -&gt; [[a]] -&gt; Int</li><li class="src short"><a href="#v:noRepeatedCoordinates">noRepeatedCoordinates</a> :: [String] -&gt; Int</li><li class="src short"><a href="#v:listHeadIsCoordinate">listHeadIsCoordinate</a> :: [String] -&gt; Int</li></ul></div><div id="interface"><h1>Documentation</h1><div class="top"><p class="src"><a name="v:inStr" class="def">inStr</a> :: String -&gt; [String]</p><div class="doc"><p>Boilerplate function by teacher</p></div></div><div class="top"><p class="src"><a name="v:outStr" class="def">outStr</a> :: [String] -&gt; String</p><div class="doc"><p>Boilerplate function by teacher</p></div></div><div class="top"><p class="src"><a name="v:main" class="def">main</a> :: IO ()</p><div class="doc"><p>Main function which starts off the program by getting the input</p></div></div><div class="top"><p class="src"><a name="v:tarefa1" class="def">tarefa1</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: [String]</td><td class="doc"><p>The list of lines to be parsed</p></td></tr><tr><td class="src">-&gt; [String]</td><td class="doc"><p>Returns [<a href="OK.html">OK</a>] on success or a line number on error (ex: [&quot;2&quot;])</p></td></tr></table></div><div class="doc"><p>Validates sokoban input including map and coordinates. Returns OK or the number of the line where an error was found.</p></div></div><div class="top"><p class="src"><a name="v:validateMapLines" class="def">validateMapLines</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: [String]</td><td class="doc"><p>List of map lines</p></td></tr><tr><td class="src">-&gt; Int</td><td class="doc"><p>Number of lines already parsed</p></td></tr><tr><td class="src">-&gt; Int</td><td class="doc"><p>-1 on success, line index on error</p></td></tr></table></div><div class="doc"><p>Validates map lines recursively</p></div></div><div class="top"><p class="src"><a name="v:validatePlayerCoordinates" class="def">validatePlayerCoordinates</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: [String]</td><td class="doc"><p>List of map lines</p></td></tr><tr><td class="src">-&gt; String</td><td class="doc"><p>Player coordinate line</p></td></tr><tr><td class="src">-&gt; Bool</td><td class="doc"><p>True when valid, False otherwise</p></td></tr></table></div><div class="doc"><p>Validates a single line containing the player coordinates</p></div></div><div class="top"><p class="src"><a name="v:validateCoordinateLines" class="def">validateCoordinateLines</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: [String]</td><td class="doc"><p>List of map lines</p></td></tr><tr><td class="src">-&gt; [String]</td><td class="doc"><p>List of coordinate lines</p></td></tr><tr><td class="src">-&gt; Int</td><td class="doc"><p>Number of coordinate lines already parsed (starts off as 1, due to the player coordinate line)</p></td></tr><tr><td class="src">-&gt; [String]</td><td class="doc"><p>List of already parsed coordinate lines (to check for repetition)</p></td></tr><tr><td class="src">-&gt; Int</td><td class="doc"><p>-1 on success, line index on error</p></td></tr></table></div><div class="doc"><p>Validates coordinate lines recursively</p><p>Note:
  The coordinate lines validation function can return a line number relative to the lines it was given
  because we calculate the correct line number on the parent function (coordinateLinesResult + length mapLines)</p></div></div><div class="top"><p class="src"><a name="v:validateEmptyLines" class="def">validateEmptyLines</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: [String]</td><td class="doc"><p>List of &quot;empty&quot; lines</p></td></tr><tr><td class="src">-&gt; Int</td><td class="doc"><p>Number of lines parsed</p></td></tr><tr><td class="src">-&gt; Int</td><td class="doc empty">&nbsp;</td></tr></table></div><div class="doc"><p>Validates the last lines of the input, after the coordinates have ended. Makes sure the lines are all empty</p></div></div><div class="top"><p class="src"><a name="v:listHasOnly" class="def">listHasOnly</a></p><div class="subs arguments"><p class="caption">Arguments</p><table><tr><td class="src">:: Eq a</td><td class="doc empty">&nbsp;</td></tr><tr><td class="src">=&gt; [a]</td><td class="doc"><p>List to evaluate</p></td></tr><tr><td class="src">-&gt; [a]</td><td class="doc"><p>List of items the list can contain</p></td></tr><tr><td class="src">-&gt; Bool</td><td class="doc empty">&nbsp;</td></tr></table></div><div class="doc"><p>Checks if a list has only a certain set of items</p></div></div><div class="top"><p class="src"><a name="v:listHeadNot" class="def">listHeadNot</a> :: [String] -&gt; Char -&gt; Int</p><div class="doc"><p>Returns the index at which a list of strings stops having a certain head character</p></div></div><div class="top"><p class="src"><a name="v:listHeadIs" class="def">listHeadIs</a> :: [String] -&gt; Char -&gt; Int</p><div class="doc"><p>Returns the index at which the first character of a line from a list of strings is a certain character or the length of the list if the character is not found</p></div></div><div class="top"><p class="src"><a name="v:myElemIndex" class="def">myElemIndex</a> :: Eq a =&gt; a -&gt; [a] -&gt; Int</p><div class="doc"><p>Had to create my own version of elemIndex that returns an Int all the time instead of a stupid maybe int that just makes code bloated. I hate haskell (shh).
 Returns index at which an element is found in a list or -1 if the element isn't found</p></div></div><div class="top"><p class="src"><a name="v:validateCoordinateFormat" class="def">validateCoordinateFormat</a> :: String -&gt; Bool</p><div class="doc"><p>Checks if a coordinate is in the right format (number, space, number) e.g. &quot;12 24&quot;</p></div></div><div class="top"><p class="src"><a name="v:howManyTimes" class="def">howManyTimes</a> :: Eq a =&gt; a -&gt; [[a]] -&gt; Int</p><div class="doc"><p>Returns the number of ocurrences of a given element on a list of lists</p></div></div><div class="top"><p class="src"><a name="v:noRepeatedCoordinates" class="def">noRepeatedCoordinates</a> :: [String] -&gt; Int</p><div class="doc"><p>Checks the coordinates present in a list of coordinate lines are all different, and if not, returns the index of the first repeating coordinate</p></div></div><div class="top"><p class="src"><a name="v:listHeadIsCoordinate" class="def">listHeadIsCoordinate</a> :: [String] -&gt; Int</p><div class="doc"><p>Returns the index at which the first string of a list is a coordinate or the list's length when a coordinate was not found</p></div></div></div></div><div id="footer"><p>Produced by <a href="http://www.haskell.org/haddock/">Haddock</a> version 2.16.1</p></div></body></html>